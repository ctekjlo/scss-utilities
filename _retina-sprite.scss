@import "compass/utilities/sprites";         // Include compass sprite helpers
@import "compass/css3/background-size";      // Include helper to calc background size


@mixin x2($name, $hover: false, $active: false, $classes: false) {
  @include _retina($name, $sprites, $sprites2x, $hover, $active, $classes);
}

@mixin retina($name, $hover: false, $active: false, $classes: false) {
  @include _retina($name, $sprites, $sprites2x, $hover, $active, $classes);
}

@mixin _retina($name, $sprites, $sprites2x, $hover, $active, $classes, $dimensions: true, $pad: 0) {
  @if $dimensions == true {
    @include sprite-dimensions($sprites, $name);
  }
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name, -$pad, -$pad);
  background-repeat: no-repeat;

  @if $hover == true {
    $name_hover: $name + -hover;

    @if $classes == true {
      &.hover {
        background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
      }
    } @else {
      &:hover {
        background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
      }
    }

  }
  @if $active == true {
    $name_active: $name + -active;

    @if $classes == true {
      &.active {
        background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
      }
    } @else {
      &:active {
        background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
      }
    }

  }

  @if $pad > 0 {
    padding: $pad;
  }

  @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
    & {
      $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
      background-image: sprite-url($sprites2x);
      background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
      @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);
      //  sprite-path() returns the path of the generated sprite sheet, which
      //  image-width() calculates the width of. the ceil() is in place in case
      //  you have sprites that have an odd-number of pixels in width

      @if $hover == true {
        $name_hover: $name + -hover;    // create myButton-hover and assign it

        @if $classes == true {
          &.hover{
            $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
            background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
          }
        } @else {
          &:hover{
            $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
            background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
          }
        }

      }
      @if $active == true {
        $name_active: $name + -active;    // create myButton-active and assign it
        @if $classes == true {
          &.active{
            $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
            background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
          }
        } @else {
          &:active{
            $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
            background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
          }
        }

      }
    }
  }
}